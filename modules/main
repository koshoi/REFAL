GO 	
	= <BR 'output=open'> <BR 'untouchable='> <BR 'depth='> <PRINT <TRANSLATE <SPECIAL_CHECK <START_BURRY <CHECK_STRUCTURE <NORMTERMS <MARK_EVERYTHING <GIVE_TEXT> > > > > > > >

GIVE_TEXT
	= <NORMALIZE <READ_WHILE <CARD> > >

MARK_EVERYTHING
	e1 = <MARK_OPERATORS <MARK_IN_BLOCK <MARK_SPACES <BRACKETERIZE <MUL_OPERATION e1 > > > > >

WARN_ERROR
	e1 = <WARN_ERROR2 (<CP 'output'>) e1 > <RP 'output=closed'>

WARN_ERROR2
	('open')(e1)(e2) = <PROUT '!!!ERROR ' e1> <PROUT e2> <PROUT '!!!\n'>
	e1 = 

PRINT
	('closed') e1 =
	('open') e1 = <PROUT e1>
	e1 = <PRINT (<CP 'output'>) e1>

STRUCT_PRINT
	(e1) e2 s(F)a (e3) e4 = <PRINT e1 sa (e3)> <STRUCT_PRINT (<STRUCT_INC e1>) e3> <STRUCT_PRINT (e1) e4>
	e1 = 

NOLABEL
	e1 s(F)a (e2) e3 = <NORMSPACES e1 ' ' <NOLABEL e2 e3> >
	e1 = e1

PRETTY_PRINT
	(e1) e2 s(F)a (e3) e4 = <PRINT e1 sa '(' <NOLABEL e3> ')' > <PRETTY_PRINT (<STRUCT_INC e1>) e3> <PRETTY_PRINT (e1) e4>
	e1 =  

STRUCT_INC
	= ' └─'
	e1 = '   ' e1

MARK_IN_BLOCK
	e1 /block/(e2) e3 = e1 /block/(<SUM_OPERATION <COMPARE_OPERATION <MARK_IN_BLOCK e2> > >) <MARK_IN_BLOCK e3>
	e1 = e1

LAZY
	e1 = e1

VOID
	e1 =
